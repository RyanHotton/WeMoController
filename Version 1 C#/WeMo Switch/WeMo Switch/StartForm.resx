<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABG3C3+Sd8w/lLoOf5M4jP+T+U2/kbcLf5D2Sr+NMob/j3TJP5C2Cn+PdMk/kPZKv45zyT+I7kR/jzP
        KP5V5zz+QNMn/i7DHP480iP+QNYn/jLIHf45zyD+Qtgp/j3TJP45zyP+Mccc/ii8Ff4wxhj+RNor/jPJ
        H/4dsw/+IbcP/jfNHv460CT+Ncsc/kHXKP5E2iv+Sd8x/jrOJv43zR7+RNor/j3TJf4wxBz+PNIj/jzS
        JP4nvRP+Rtwt/k/iNv4twhr+F6wH/jHHGf4xxxn+JLoP/i7EGf44zh/+LcMX/guhAP4KoAD+Gq4K/ii8
        Ff5C1yn+RNor/h2zDf4wxh7+MMYa/jTKG/46zyT+MMYX/irAEf4rwBj+ILQM/ie7E/4zyRv+J7sU/hyw
        Cf46zib+Rdss/jTKHP5G3C3+Q9ks/iK4D/4Wqwf+Msgd/j7UJf43zSH+Qdco/knfMP5A1if+O9El/jzS
        Jv5C2Cn+P9Un/k/lNv4/1Cb+M8kf/kPZKv5B1yj+Rdov/k7jNf47zyL+NMob/jbMHf4ovRT+K8ES/jPJ
        Gv4iuAv+HLID/kXbLP5M4jP+NMoe/jnPIf4/1Sb+Kb8R/im/Ef5L4TL+Uec4/kDWKf4/1Sf+PtQl/jjO
        If5A1if+Q9kq/jjOI/5C2Cn+Qtcp/jLIGf4qwBH+PdMk/jrQIv490yb+Rdos/jXLHP44zh/+QNYn/i7E
        Fv42zB3+Nswd/hyyA/4mvA3+O9Ei/jnPJP4etAr+JrwR/jbMHv4rwRP+LcMU/kjeMP5B1yr+D6UA/i3D
        Fv4VqwD+Kb8T/jbMIP4uxBn+HLIM/jzSI/42zB3+K8ES/ii+D/490yT+JbsQ/im/E/43zSD+L8UW/jTK
        G/490yX+M8kb/jnPIf5I3i/+PNIj/jDGF/460CH+N80f/iO5Dv4xxxn+Rdss/jnPIP4zyRr+Rtwt/jjO
        If4PpQD+Nswg/kDWJ/5D2Sz+S+Ay/jLHHv4asAz+L8Ub/j/VJv42zB7+OM4g/kXbLP4swhP+LcMU/kDW
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>